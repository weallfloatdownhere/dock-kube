- name: "Set global facts from provided triggers list."
  set_fact:
    mode_exec: '{{ "remove" if "remove" in triggers else "install" }}'
    verbose_exec: "{{ True if 'verbose' in triggers else False }}"
    workspace_directory: "{{ ansible_env.HOME | default('/root') }}/rke"
    kubernetes_cluster_name: "{{ cluster.name | default(default_cluster_name) }}"
    stamped_file:
      path: /opt
      older_than: 1d

- name: "Generate hosts list from the provided config.yml file."
  add_host:
    hostname: '{{item.address|trim|ansible.netcommon.ipaddr}}'
    ansible_connection: ssh
    ansible_user: "{{cluster.user|trim}}"
    ansible_ssh_pass: "{{cluster.password|trim}}"
    ansible_become_pass: "{{cluster.password|trim}}"
    groups: lst_nodes
  with_items: "{{cluster.nodes|default([])}}"
  when: (step_tracker == "preflight")

- name: "Set ArgoCD variables."
  set_fact:
    argocd_cluster_server: '{{ cluster.addons.argocd.cluster.server | default(default_argocd_cluster_server) }}'
    argocd_cluster_name: '{{ kubernetes_cluster_name }}'
    argocd_admin_password: '{{ cluster.addons.argocd.admin_password | default(default_argocd_admin_password) }}'
    argocd_namespace: '{{ cluster.addons.argocd.namespace | default(default_argocd_namespace) }}'
  notify: export encrypted values
  when: (step_tracker == "argocd")

- name: "Encrypt the admin password (bcrypt)."
  encrypt_string:
    clear_string: "{{ argocd_admin_password }}"
    encryption: "bcrypt"
  register: reg_encrypted_admin_password
  notify: export encrypted values
  when: (step_tracker == "argocd")

- name: "Encrypt the cluster name (base64)."
  encrypt_string:
    encryption: "base64"
    clear_string: "{{ argocd_cluster_name }}"
  register: reg_encrypted_cluster_name
  notify: export encrypted values
  when: (step_tracker == "argocd")

- name: "Encrypt the cluster server (base64)."
  encrypt_string:
    encryption: "base64"
    clear_string: "{{ argocd_cluster_server }}"
  register: reg_encrypted_argocd_cluster_server
  notify: export encrypted values
  when: (step_tracker == "argocd")

- name: "Encrypt cluster config from template (base64)."
  encrypt_string:
    encryption: "base64"
    clear_string: |
      '{
       "username": "admin",
       "password": "{{ reg_encrypted_admin_password.stdout | trim }}",
       "tlsClientConfig": {
         "insecure": "{{ cluster.addons.argocd.insecure | default(true) }}"
        }
      }'
  register: reg_encrypted_argocd_config_json
  notify: export encrypted values
  when: (step_tracker == "argocd")

- name: "Set ArgoCD encrypted variables."
  set_fact:
    argocd_encrypted_cluster_server: "{{ reg_encrypted_argocd_cluster_server.stdout | trim }}"
    argocd_encrypted_cluster_name: "{{ reg_encrypted_cluster_name.stdout | trim }}"
    argocd_encrypted_admin_password: "{{ reg_encrypted_admin_password.stdout | trim }}"
    argocd_encrypted_cluster_config: "{{ reg_encrypted_argocd_config_json.stdout | trim }}"
  notify: export encrypted values
  when: (step_tracker == "argocd")