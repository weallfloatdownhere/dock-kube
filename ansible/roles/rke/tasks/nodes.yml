- name: Update system
  become: True
  shell: |
    sudo apt-get -y update
    sudo apt-get -y upgrade
  register: docker_install
  when: ("install" in triggers|default([]))

- name: Update apt cache
  become: True
  apt: update_cache=yes cache_valid_time=3600
  when: ("install" in triggers|default([]))

- name: Upgrade all apt packages
  become: True
  apt: upgrade=dist
  when: ("install" in triggers|default([]))

- name: Install dependencies
  become: True
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - apt-transport-https
    - ca-certificates
    - curl
    - software-properties-common
    - gnupg-agent
    - ntp
    - nfs-kernel-server
    - nfs-common
    - python3
    - git
  register: docker_install
  when: ("install" in triggers|default([]))

- name: Add RKE admin user
  become: True
  user:
    name: rke
    shell: /bin/bash
    generate_ssh_key: True
  when: ("install" in triggers|default([]))

- name: Create sudo file
  become: True
  file:
    path: /etc/sudoers.d/rke
    state: touch
  when: ("install" in triggers|default([]))

- name: Give rke user passwordless sudo
  become: True
  lineinfile:
    path: /etc/sudoers.d/rke
    state: present
    line: 'rke ALL=(ALL:ALL) NOPASSWD: ALL'
  when: ("install" in triggers|default([]))

- name: Set authorized key taken from file
  become: True
  authorized_key:
    user: rke
    state: present
    key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
  when: ("install" in triggers|default([]))

- name: Load kernel modules for RKE
  become: True
  modprobe:
    name: "{{ item }}"
    state: present
  with_items:
    - br_netfilter
    - ip6_udp_tunnel
    - ip_set
    - ip_set_hash_ip
    - ip_set_hash_net
    - iptable_filter
    - iptable_nat
    - iptable_mangle
    - iptable_raw
    - nf_conntrack_netlink
    - nf_conntrack
    - nf_defrag_ipv4
    - nf_nat
    - nfnetlink
    - udp_tunnel
    - veth
    - vxlan
    - x_tables
    - xt_addrtype
    - xt_conntrack
    - xt_comment
    - xt_mark
    - xt_multiport
    - xt_nat
    - xt_recent
    - xt_set
    - xt_statistic
    - xt_tcpudp
  when: ("install" in triggers|default([]))

- name: Add Docker GPG apt Key
  become: True
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
  when: ("install" in triggers|default([]))

- name: Add Docker Repository
  become: True
  apt_repository:
    repo: deb https://download.docker.com/linux/ubuntu focal stable
    state: present
  when: ("install" in triggers|default([]))

- name: Install Docker
  become: True
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - docker-ce
    - docker-ce-cli 
    - containerd.io
  register: docker_install
  when: ("install" in triggers|default([]))

- name: Disable swap
  become: True
  command: swapoff --all
  when: ("install" in triggers|default([]))

- name: Make docker.service.d directory
  become: True
  file:
    path: /usr/lib/systemd/system/docker.service.d
    state: directory
  when: ("install" in triggers|default([]))

- name: Disable SWAP in fstab since kubernetes can't work with swap enabled (2/2)
  become: True
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+.*)$'
    replace: '# \1'
  when: ("install" in triggers|default([]))

- name: Set Docker mount flags
  become: True
  copy:
    dest: /usr/lib/systemd/system/docker.service.d/mount_flags.conf
    content: |
      [Service]
      MountFlags=shared
  register: mount_flags_updated
  when: ("install" in triggers|default([]))

- name: Reload systemd daemon
  become: True
  systemd:
    daemon_reload: yes
  when: 
    - mount_flags_updated is changed
  register: system_daemon_reload

- name: "[PREREQUISITES] - Enable and Start services."
  become: True
  ansible.builtin.systemd:
    name: "{{ item|trim }}"
    state: 'started'
    enabled: True
  with_items: [ 'nfs-server.service', 'docker', 'ntp', 'containerd' ]
  when: ("install" in triggers|default([]))

- name: "[PREREQUISITES] - Disable auto security updates."
  become: True
  ansible.builtin.systemd:
    name: "{{ item|trim }}"
    state: 'stopped'
    enabled: False
  with_items: [ 'apt-daily-upgrade.timer', 'apt-daily-upgrade.service', 'apt-daily.timer', 'apt-daily.service', snapd.socket, snapd.service ]
  when: ("install" in triggers|default([]))

- name: Restart Docker
  service:
    name: docker
    state: restarted
    enabled: yes
  when:
    - docker_install is changed
    - system_daemon_reload is changed
    - ("install" in triggers|default([]))

- name: Add RKE SSH user to dockerroot group
  become: True
  user:
    name: rke
    groups: [docker, sudo]
    append: yes
  when: ("install" in triggers|default([]))

- name: Modify sysctl entries
  become: True
  sysctl:
    name: '{{ item.key }}'
    value: '{{ item.value }}'
    sysctl_set: yes
    state: present
    reload: yes
  with_items:
    - {key: net.bridge.bridge-nf-call-ip6tables, value: 1}
    - {key: net.bridge.bridge-nf-call-iptables,  value: 1}
    - {key: net.ipv4.ip_forward,  value: 1}
  when: ("install" in triggers|default([]))

- name: "[REBOOT] - Check if /var/run/reboot-required exists"
  stat:
    path: /var/run/reboot-required
  register: reboot_required_file
    
- name: "[REBOOT] - Reboot if required"
  become: True
  reboot:
  when: reboot_required_file.stat.exists == True